/****************************************************************************
 * libwiigui Template
 * Tantric 2009
 *
 * video.cpp
 * Video routines
 ***************************************************************************/

#include <xetypes.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <input/input.h>
#include <console/console.h>

#include <xenos/xe.h>
#include <xenos/xenos.h>
#include <xenos/edram.h>
#include <xenos/xenos.h>

#include "input.h"
#include "libwiigui/gui.h"

#include <debug.h>

int LoadTextureFromFile(char * pSrcFile, XenosSurface **ppTexture);

typedef unsigned int DWORD;
#include "../shaders/ps.c.h"
#include "../shaders/ps.tc.h"
#include "../shaders/ps.t.h"
#include "../shaders/vs.h"

#define DEFAULT_FIFO_SIZE 256 * 1024

static int whichfb = 0; // Switch
//static GXRModeObj *vmode; // Menu video mode
//static unsigned char gp_fifo[DEFAULT_FIFO_SIZE] ATTRIBUTE_ALIGN(32);
//static Mtx GXmodelView2D;
int screenheight;
int screenwidth;
u32 FrameTimer = 0;

static struct XenosDevice _xe;
static struct XenosVertexBuffer *vb = NULL;
struct XenosDevice * g_pVideoDevice = NULL;
static struct XenosShader * g_pVertexShader = NULL;
static struct XenosShader * g_pPixelTexturedShader = NULL;
static struct XenosShader * g_pPixelTexturedColoredShader = NULL;
static struct XenosShader * g_pPixelColoredShader = NULL;

typedef struct vertex_fmt{
    float x,y,z,w;
    float u,v;
    int c;
} vertex_fmt;

/****************************************************************************
 * ResetVideo_Menu
 *
 * Reset the video/rendering mode for the menu
 ****************************************************************************/
void
ResetVideo_Menu() {

    //	Mtx44 p;
    //	f32 yscale;
    //	u32 xfbHeight;
    //
    //	VIDEO_Configure (vmode);
    //	VIDEO_Flush();
    //	VIDEO_WaitVSync();
    //	if (vmode->viTVMode & VI_NON_INTERLACE)
    //		VIDEO_WaitVSync();
    //	else
    //		while (VIDEO_GetNextField())
    //			VIDEO_WaitVSync();
    //
    //	// clears the bg to color and clears the z buffer
    //	GXColor background = {0, 0, 0, 255};
    //	GX_SetCopyClear (background, 0x00ffffff);
    //
    //	yscale = GX_GetYScaleFactor(vmode->efbHeight,vmode->xfbHeight);
    //	xfbHeight = GX_SetDispCopyYScale(yscale);
    //	GX_SetScissor(0,0,vmode->fbWidth,vmode->efbHeight);
    //	GX_SetDispCopySrc(0,0,vmode->fbWidth,vmode->efbHeight);
    //	GX_SetDispCopyDst(vmode->fbWidth,xfbHeight);
    //	GX_SetCopyFilter(vmode->aa,vmode->sample_pattern,GX_TRUE,vmode->vfilter);
    //	GX_SetFieldMode(vmode->field_rendering,((vmode->viHeight==2*vmode->xfbHeight)?GX_ENABLE:GX_DISABLE));
    //
    //	if (vmode->aa)
    //		GX_SetPixelFmt(GX_PF_RGB565_Z16, GX_ZC_LINEAR);
    //	else
    //		GX_SetPixelFmt(GX_PF_RGB8_Z24, GX_ZC_LINEAR);
    //
    //	// setup the vertex descriptor
    //	// tells the flipper to expect direct data
    //	GX_ClearVtxDesc();
    //	GX_InvVtxCache ();
    //	GX_InvalidateTexAll();
    //
    //	GX_SetVtxDesc(GX_VA_TEX0, GX_NONE);
    //	GX_SetVtxDesc(GX_VA_POS, GX_DIRECT);
    //	GX_SetVtxDesc (GX_VA_CLR0, GX_DIRECT);
    //
    //	GX_SetVtxAttrFmt (GX_VTXFMT0, GX_VA_POS, GX_POS_XYZ, GX_F32, 0);
    //	GX_SetVtxAttrFmt (GX_VTXFMT0, GX_VA_CLR0, GX_CLR_RGBA, GX_RGBA8, 0);
    //	GX_SetVtxAttrFmt(GX_VTXFMT0, GX_VA_TEX0, GX_TEX_ST, GX_F32, 0);
    //	GX_SetZMode (GX_FALSE, GX_LEQUAL, GX_TRUE);
    //
    //	GX_SetNumChans(1);
    //	GX_SetNumTexGens(1);
    //	GX_SetTevOp (GX_TEVSTAGE0, GX_PASSCLR);
    //	GX_SetTevOrder(GX_TEVSTAGE0, GX_TEXCOORD0, GX_TEXMAP0, GX_COLOR0A0);
    //	GX_SetTexCoordGen(GX_TEXCOORD0, GX_TG_MTX2x4, GX_TG_TEX0, GX_IDENTITY);
    //
    //	guMtxIdentity(GXmodelView2D);
    //	guMtxTransApply (GXmodelView2D, GXmodelView2D, 0.0F, 0.0F, -50.0F);
    //	GX_LoadPosMtxImm(GXmodelView2D,GX_PNMTX0);
    //
    //	guOrtho(p,0,479,0,639,0,300);
    //	GX_LoadProjectionMtx(p, GX_ORTHOGRAPHIC);
    //
    //	GX_SetViewport(0,0,vmode->fbWidth,vmode->efbHeight,0,1);
    //	GX_SetBlendMode(GX_BM_BLEND, GX_BL_SRCALPHA, GX_BL_INVSRCALPHA, GX_LO_CLEAR);
    //	GX_SetAlphaUpdate(GX_TRUE);
    TR;
    Xe_SetRenderTarget(g_pVideoDevice, Xe_GetFramebufferSurface(g_pVideoDevice));
    //Xe_SetBlendControl(g_pVideoDevice, XE_BLEND_ONE, XE_BLENDOP_ADD, XE_BLEND_ZERO, XE_BLEND_ONE, XE_BLENDOP_ADD, XE_BLEND_ZERO);
    
    Xe_SetCullMode(g_pVideoDevice, XE_CULL_NONE);
        
    Xe_SetClearColor(g_pVideoDevice, 0xFFFFFFFF);
}

/****************************************************************************
 * InitVideo
 *
 * This function MUST be called at startup.
 * - also sets up menu video mode
 ***************************************************************************/
XenosSurface * p;
void
InitVideo() {
    TR;
    xenos_init(VIDEO_MODE_AUTO);
    //console_init();

    g_pVideoDevice = &_xe;

    Xe_Init(g_pVideoDevice);

    XenosSurface * fb = Xe_GetFramebufferSurface(g_pVideoDevice);

    screenheight = fb->height;
    screenwidth = fb->width;

    
    // Shader
    static const struct XenosVBFFormat vbf = {
        3,
        {
            {XE_USAGE_POSITION, 0, XE_TYPE_FLOAT4},
            {XE_USAGE_TEXCOORD, 0, XE_TYPE_FLOAT2},
            {XE_USAGE_COLOR, 0, XE_TYPE_UBYTE4},
        }
    };

//    g_pPixelTexturedShader = Xe_LoadShaderFromMemory(g_pVideoDevice, (void*) g_xps_psT);
//    Xe_InstantiateShader(g_pVideoDevice, g_pPixelTexturedShader, 0);
//
//    g_pPixelColoredShader = Xe_LoadShaderFromMemory(g_pVideoDevice, (void*) g_xps_psC);
//    Xe_InstantiateShader(g_pVideoDevice, g_pPixelColoredShader, 0);
//
//    g_pPixelTexturedColoredShader = Xe_LoadShaderFromMemory(g_pVideoDevice, (void*) g_xps_psTC);
//    Xe_InstantiateShader(g_pVideoDevice, g_pPixelTexturedColoredShader, 0);
    
    g_pPixelTexturedShader = Xe_LoadShaderFromMemory(g_pVideoDevice, (void*) g_xps_psT);
    Xe_InstantiateShader(g_pVideoDevice, g_pPixelTexturedShader, 0);

    g_pPixelColoredShader = Xe_LoadShaderFromMemory(g_pVideoDevice, (void*) g_xps_psT);
    Xe_InstantiateShader(g_pVideoDevice, g_pPixelColoredShader, 0);

    g_pPixelTexturedColoredShader = Xe_LoadShaderFromMemory(g_pVideoDevice, (void*) g_xps_psT);
    Xe_InstantiateShader(g_pVideoDevice, g_pPixelTexturedColoredShader, 0);

    g_pVertexShader = Xe_LoadShaderFromMemory(g_pVideoDevice, (void*) g_xvs_VSmain);
    Xe_InstantiateShader(g_pVideoDevice, g_pVertexShader, 0);
    Xe_ShaderApplyVFetchPatches(g_pVideoDevice, g_pVertexShader, 0, &vbf);


    // Vb
    {
        vb = Xe_CreateVertexBuffer(g_pVideoDevice,4*sizeof(vertex_fmt));


        float x = -1.0f;
        float y = 1.0f;
        float w = 4.0f;
        float h = 4.0f;

        enum {
            UvBottom = 0,
            UvTop,
            UvLeft,
            UvRight
        };
        float ScreenUv[4] = {0.f, 1.0f, 1.0f, 0.f};

        vertex_fmt *Rect = (vertex_fmt *)Xe_VB_Lock(g_pVideoDevice, vb, 0, 4 * sizeof (vertex_fmt), XE_LOCK_WRITE);
        {
            ScreenUv[UvTop] = ScreenUv[UvTop]*2;
            ScreenUv[UvLeft] = ScreenUv[UvLeft]*2;

            // top left
            Rect[0].x = x;
            Rect[0].y = y;
            Rect[0].u = ScreenUv[UvBottom];
            Rect[0].v = ScreenUv[UvRight];

            // bottom left
            Rect[1].x = x;
            Rect[1].y = y - h;
            Rect[1].u = ScreenUv[UvBottom];
            Rect[1].v = ScreenUv[UvLeft];

            // top right
            Rect[2].x = x + w;
            Rect[2].y = y;
            Rect[2].u = ScreenUv[UvTop];
            Rect[2].v = ScreenUv[UvRight];

            // top right
            Rect[3].x = x + w;
            Rect[3].y = y;
            Rect[3].u = ScreenUv[UvTop];
            Rect[3].v = ScreenUv[UvRight];

            int i = 0;
            for (i = 0; i < 3; i++) {
                Rect[i].z = 0.0;
                Rect[i].w = 1.0;
                Rect[i].c = 0;
            }
        }
        Xe_VB_Unlock(g_pVideoDevice, vb);
    }
    
    ResetVideo_Menu();
    
    edram_init(g_pVideoDevice);
    
    for (int i = 0; i < 60; i++) {
        Xe_Resolve(g_pVideoDevice);
        Xe_Sync(g_pVideoDevice);
    }
    
    Xe_InvalidateState(g_pVideoDevice);

    //    // Finally, the video is up and ready for use :)

    
    LoadTextureFromFile("uda:/1.png",&p);
}

/****************************************************************************
 * StopGX
 *
 * Stops GX (when exiting)
 ***************************************************************************/
void StopGX() {
    //    GX_AbortFrame();
    //    GX_Flush();
    //
    //    VIDEO_SetBlack(TRUE);
    //    VIDEO_Flush();
}

/****************************************************************************
 * Menu_Render
 *
 * Renders everything current sent to GX, and flushes video
 ***************************************************************************/
void Menu_Render() {
    TR;
    whichfb ^= 1; // flip framebuffer
    //    GX_SetZMode(GX_TRUE, GX_LEQUAL, GX_TRUE);
    //    GX_SetColorUpdate(GX_TRUE);
    //    GX_CopyDisp(xfb[whichfb], GX_TRUE);
    //    GX_DrawDone();
    //    VIDEO_SetNextFramebuffer(xfb[whichfb]);
    //    VIDEO_Flush();
    //    VIDEO_WaitVSync();
    
    Menu_DrawImg(0,0,0,0,p,0,0,0,0);
    
    FrameTimer++;
    Xe_Resolve(g_pVideoDevice);
    //while (!Xe_IsVBlank(g_pVideoDevice));
    Xe_Sync(g_pVideoDevice);
    
    Xe_InvalidateState(g_pVideoDevice);
}

/****************************************************************************
 * Menu_DrawImg
 *
 * Draws the specified image on screen using GX
 ***************************************************************************/
void Menu_DrawImg(f32 xpos, f32 ypos, u16 width, u16 height, XenosSurface * data,
        f32 degrees, f32 scaleX, f32 scaleY, u8 alpha) {
    
    
    if (data == NULL)
        return;
    TR;
    
    Xe_SetStreamSource(g_pVideoDevice,0,vb,0,4);
    Xe_SetShader(g_pVideoDevice,SHADER_TYPE_PIXEL,g_pPixelTexturedShader,0);
    Xe_SetShader(g_pVideoDevice,SHADER_TYPE_VERTEX,g_pVertexShader,0);
    
    Xe_SetTexture(g_pVideoDevice,0,data);
    
    Xe_SetFillMode(g_pVideoDevice,0x25,0x25);
    Xe_DrawPrimitive(g_pVideoDevice, XE_PRIMTYPE_TRIANGLESTRIP, 0, 2);

    //    GXTexObj texObj;
    //
    //    GX_InitTexObj(&texObj, data, width, height, GX_TF_RGBA8, GX_CLAMP, GX_CLAMP, GX_FALSE);
    //    GX_LoadTexObj(&texObj, GX_TEXMAP0);
    //    GX_InvalidateTexAll();
    //
    //    GX_SetTevOp(GX_TEVSTAGE0, GX_MODULATE);
    //    GX_SetVtxDesc(GX_VA_TEX0, GX_DIRECT);
    //
    //    Mtx m, m1, m2, mv;
    //    width >>= 1;
    //    height >>= 1;
    //
    //    guMtxIdentity(m1);
    //    guMtxScaleApply(m1, m1, scaleX, scaleY, 1.0);
    //    guVector axis = (guVector){0, 0, 1};
    //    guMtxRotAxisDeg(m2, &axis, degrees);
    //    guMtxConcat(m2, m1, m);
    //
    //    guMtxTransApply(m, m, xpos + width, ypos + height, 0);
    //    guMtxConcat(GXmodelView2D, m, mv);
    //    GX_LoadPosMtxImm(mv, GX_PNMTX0);
    //
    //    GX_Begin(GX_QUADS, GX_VTXFMT0, 4);
    //    GX_Position3f32(-width, -height, 0);
    //    GX_Color4u8(0xFF, 0xFF, 0xFF, alpha);
    //    GX_TexCoord2f32(0, 0);
    //
    //    GX_Position3f32(width, -height, 0);
    //    GX_Color4u8(0xFF, 0xFF, 0xFF, alpha);
    //    GX_TexCoord2f32(1, 0);
    //
    //    GX_Position3f32(width, height, 0);
    //    GX_Color4u8(0xFF, 0xFF, 0xFF, alpha);
    //    GX_TexCoord2f32(1, 1);
    //
    //    GX_Position3f32(-width, height, 0);
    //    GX_Color4u8(0xFF, 0xFF, 0xFF, alpha);
    //    GX_TexCoord2f32(0, 1);
    //    GX_End();
    //    GX_LoadPosMtxImm(GXmodelView2D, GX_PNMTX0);
    //
    //    GX_SetTevOp(GX_TEVSTAGE0, GX_PASSCLR);
    //    GX_SetVtxDesc(GX_VA_TEX0, GX_NONE);
}

/****************************************************************************
 * Menu_DrawRectangle
 *
 * Draws a rectangle at the specified coordinates using GX
 ***************************************************************************/
void Menu_DrawRectangle(f32 x, f32 y, f32 width, f32 height, GXColor color, u8 filled) {
    TR;
    Xe_SetStreamSource(g_pVideoDevice,0,vb,0,4);
    Xe_SetShader(g_pVideoDevice,SHADER_TYPE_PIXEL,g_pPixelColoredShader,0);
    Xe_SetShader(g_pVideoDevice,SHADER_TYPE_VERTEX,g_pVertexShader,0);
    //    long n = 4;
    //    f32 x2 = x + width;
    //    f32 y2 = y + height;
    //    guVector v[] = {
    //        {x, y, 0.0f},
    //        {x2, y, 0.0f},
    //        {x2, y2, 0.0f},
    //        {x, y2, 0.0f},
    //        {x, y, 0.0f}};
    //    u8 fmt = GX_TRIANGLEFAN;
    //
    //    if (!filled) {
    //        fmt = GX_LINESTRIP;
    //        n = 5;
    //    }
    //
    //    GX_Begin(fmt, GX_VTXFMT0, n);
    //    for (long i = 0; i < n; ++i) {
    //        GX_Position3f32(v[i].x, v[i].y, v[i].z);
    //        GX_Color4u8(color.r, color.g, color.b, color.a);
    //    }
    //    GX_End();
}
